================================================================================
AI MENTAL HEALTH CHATBOT - COLLEGE PROJECT
================================================================================

PROJECT OVERVIEW
----------------
A full-stack AI-powered mental health support chatbot that provides empathetic
responses, detects user moods, suggests coping strategies, and includes crisis
detection with emergency resources.

TECHNOLOGY STACK
----------------
Frontend:
  - React 18 + TypeScript
  - Tailwind CSS
  - Vite
  - Supabase JS Client

Backend (Optional):
  - Flask (Python)
  - TextBlob & NLTK (NLP)
  - Supabase (Database)

Database:
  - Supabase (PostgreSQL)
  - Row Level Security enabled
  - 3 tables: chat_sessions, chat_messages, mood_analytics

KEY FEATURES
------------
1. Real-time chat interface with message history
2. AI mood detection (happy, sad, anxious, stressed, angry, neutral, crisis)
3. Empathetic, context-aware responses
4. Practical coping strategies for each mood type
5. Crisis detection with emergency helpline numbers
6. Anonymous sessions (no login required)
7. Chat history persistence
8. Mood analytics tracking
9. Safety disclaimers throughout the UI
10. Mobile-responsive design

SAFETY FEATURES
---------------
- Prominent disclaimer modal on startup
- Crisis detection for keywords like "suicide", "hurt myself", etc.
- Emergency banner with direct access to crisis resources
- 988 Suicide & Crisis Lifeline
- Crisis Text Line (741741)
- Footer with constant reminder: "Not a replacement for therapy"
- No personally identifiable information stored

PROJECT STRUCTURE
-----------------
project/
├── backend/                    # Python Flask backend (optional)
│   ├── app.py                 # Main Flask server
│   ├── database.py            # Database operations
│   ├── nlp_engine.py          # Mood detection & responses
│   ├── requirements.txt       # Python dependencies
│   ├── setup_database.sql     # Database schema
│   └── .env                   # Backend config
│
├── src/                       # React frontend
│   ├── components/            # UI components
│   ├── services/              # Business logic
│   ├── types/                 # TypeScript types
│   ├── lib/                   # Utilities
│   └── App.tsx                # Main app
│
├── QUICK_START.md            # Fast setup guide
├── SETUP_INSTRUCTIONS.md     # Detailed setup
└── PROJECT_STRUCTURE.md      # Architecture docs

DATABASE SCHEMA
---------------
Table: chat_sessions
  - Stores anonymous user sessions
  - Fields: id, session_id, created_at, last_active_at, user_ip

Table: chat_messages
  - Stores all chat messages (user + bot)
  - Fields: id, session_id, message_type, message_text,
           detected_mood, confidence_score, created_at

Table: mood_analytics
  - Aggregates mood statistics
  - Fields: id, session_id, mood, count, updated_at

MOOD DETECTION ALGORITHM
-------------------------
1. Crisis Detection: Check for crisis keywords first (highest priority)
2. Keyword Matching: Match against predefined mood keyword lists
3. Sentiment Analysis: TextBlob polarity score as backup
4. Confidence Scoring: Based on keyword matches and sentiment strength

Mood Categories:
- Happy: Positive keywords (joy, excited, great, wonderful)
- Sad: Negative keywords (depressed, lonely, hopeless)
- Anxious: Anxiety keywords (nervous, worried, panic, fear)
- Stressed: Stress keywords (pressure, overwhelmed, exhausted)
- Angry: Anger keywords (frustrated, mad, furious)
- Crisis: Harm keywords (suicide, hurt myself, end my life)
- Neutral: Default when no clear mood detected

COPING STRATEGIES
-----------------
Anxious:
  - 5-4-3-2-1 grounding technique
  - Box breathing (4-4-4-4)
  - Journaling

Stressed:
  - Take breaks
  - Task prioritization
  - Progressive muscle relaxation

Sad:
  - Reach out to someone
  - Self-care activities
  - Gentle movement/exercise

Angry:
  - Timeout and space
  - Physical release
  - Expressive writing

API ENDPOINTS (Backend)
-----------------------
POST /api/session/create
  - Creates new anonymous chat session
  - Returns: session_id

POST /api/chat
  - Body: { message, session_id }
  - Returns: { response, mood, confidence, is_crisis }

GET /api/history/<session_id>
  - Returns full chat history for session

GET /api/mood-analytics/<session_id>
  - Returns mood statistics for session

SETUP STEPS (Quick)
-------------------
1. Create Supabase account and project
2. Run backend/setup_database.sql in SQL Editor
3. Copy API credentials to .env file
4. Run: npm install
5. Run: npm run dev
6. Open http://localhost:5173

DEPLOYMENT OPTIONS
------------------
Frontend:
  - Vercel (recommended)
  - Netlify
  - Cloudflare Pages

Backend (optional):
  - Heroku
  - Render
  - Railway

Database:
  - Supabase (already cloud-hosted)

SECURITY CONSIDERATIONS
-----------------------
1. Row Level Security enabled on all tables
2. No authentication required (intentional for accessibility)
3. No PII collected or stored
4. Anonymous sessions only
5. Input validation on all user messages
6. Environment variables for sensitive data
7. CORS properly configured

ETHICAL CONSIDERATIONS
----------------------
1. Clear disclaimers: AI is not a therapist
2. Prominent emergency resources
3. Encourages professional help
4. Transparent about limitations
5. Privacy-focused design
6. No diagnostic claims
7. Crisis detection prioritized

TESTING CHECKLIST
-----------------
☑ Normal conversation (neutral mood)
☑ Happy mood detection and response
☑ Sad mood detection and coping strategies
☑ Anxious mood with grounding techniques
☑ Stressed mood with stress management tips
☑ Angry mood with calming strategies
☑ Crisis detection with emergency banner
☑ Chat history persistence
☑ Session management
☑ Mood analytics tracking
☑ Disclaimer modal on startup
☑ Emergency resources accessibility
☑ Responsive design (mobile/desktop)
☑ Build process (npm run build)

PRESENTATION TIPS
-----------------
1. Start with disclaimer - shows ethical awareness
2. Demonstrate mood detection with different messages
3. Show crisis detection (handle sensitively)
4. Highlight database structure in Supabase
5. Explain mood analytics feature
6. Emphasize safety features throughout
7. Discuss limitations openly
8. Show responsive design
9. Mention deployment-ready architecture

FUTURE ENHANCEMENTS
-------------------
- Multi-language support
- Voice input/output
- Integration with real therapist services
- Advanced NLP (BERT, GPT models)
- User accounts (optional)
- Export chat history
- Mood visualization dashboards
- Wearable device integration
- Community support features
- Professional chat integration

FILES INCLUDED
--------------
Frontend:
  ✓ src/App.tsx - Main application
  ✓ src/components/* - UI components
  ✓ src/services/chatService.ts - Business logic
  ✓ src/types/chat.ts - TypeScript types
  ✓ src/lib/supabase.ts - Database client

Backend (Optional):
  ✓ backend/app.py - Flask server
  ✓ backend/database.py - DB operations
  ✓ backend/nlp_engine.py - AI logic
  ✓ backend/requirements.txt - Dependencies
  ✓ backend/setup_database.sql - Schema

Documentation:
  ✓ QUICK_START.md - Fast setup guide
  ✓ SETUP_INSTRUCTIONS.md - Detailed setup
  ✓ PROJECT_STRUCTURE.md - Architecture
  ✓ PROJECT_SUMMARY.txt - This file

Configuration:
  ✓ .env - Environment variables
  ✓ package.json - Node dependencies
  ✓ tsconfig.json - TypeScript config
  ✓ tailwind.config.js - Styling config
  ✓ vite.config.ts - Build config

IMPORTANT REMINDERS
-------------------
⚠ This is for EDUCATIONAL PURPOSES ONLY
⚠ NOT a replacement for professional therapy
⚠ NOT approved for real mental health interventions
⚠ ALWAYS include disclaimers
⚠ ALWAYS provide emergency resources
⚠ Test crisis detection thoroughly
⚠ Follow academic integrity policies
⚠ Cite all external resources

EMERGENCY RESOURCES (USA)
-------------------------
Suicide & Crisis Lifeline: 988
Crisis Text Line: Text HOME to 741741
Emergency Services: 911
International: https://www.iasp.info/resources/Crisis_Centres/

CREDITS
-------
Built as a college project
Uses open-source technologies
Emergency resources from national organizations
Not for commercial deployment without proper licensing

================================================================================
For detailed instructions, see QUICK_START.md
For architecture details, see PROJECT_STRUCTURE.md
================================================================================